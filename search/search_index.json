{"docs":[{"location":"/paradox.json","text":"","title":""},{"location":"/index.html","text":"","title":"Sapphire Extension"},{"location":"/index.html#sapphire-extension","text":"Sapphire Extensions provide some useful classes for dealing with tables, editors, data lists and many more.\nIt solves standard problems for MVC Applications (e.g. Master/Detail).\nIt depends on sapphire-core, ControlsFX and Ikonli.","title":"Sapphire Extension"},{"location":"/index.html#features","text":"TableView Extensions (ColumnFactory) ViewController Extensions (DataTable, Master / Detail, TabView …) ListView Extensions (DataListView, DualDataListView) Filter (DataFilter for TableView, ListView) ThirdParty Integration (controls-fx, ikonli) BeanItems (combines sapphire-core FXBean with controls-fx PropertySheet)","title":"Features"},{"location":"/index.html#technology-stack","text":"","title":"Technology Stack"},{"location":"/index.html#sapphire-core","text":"Documentation","title":"sapphire-core"},{"location":"/index.html#controlsfx","text":"https://github.com/controlsfx/controlsfx","title":"ControlsFX"},{"location":"/index.html#ikonli","text":"http://kordamp.org/ikonli/","title":"Ikonli"},{"location":"/view_controller/index.html","text":"","title":"ViewController Extensions"},{"location":"/view_controller/index.html#viewcontroller-extensions","text":"All ViewController Extensions are subclasses of the sapphire-core ViewController.\nAll Controllers are abstract by default. Most of this VievController are used for viewing/editing data mapped in FXBeans. Dealing with Generics is done by defining a class tag.\nExample for implementing the definition for a Person class:\ntype R = Person\n\n def ct: ClassTag[Person] = classTag[R]","title":"ViewController Extensions"},{"location":"/view_controller/index.html#types","text":"BaseDataTableController (adds easy table implementation with sorting, filtering, …) BaseEditorController (updateBean, save, revert, …) BaseTabController (Tab Selection, …) BaseMasterController, BaseDetailController (simple master detail handling with navigation)","title":"Types"},{"location":"/view_controller/index.html#example","text":"Shows usage of Filters in action.\npackage com.sfxcode.sapphire.extension.showcase.controller.table\n\nimport com.sfxcode.sapphire.core.value.{ BeanConversions, FXBean }\nimport com.sfxcode.sapphire.extension.controller.DataTableController\nimport com.sfxcode.sapphire.extension.filter.DataTableFilter\nimport com.sfxcode.sapphire.extension.showcase.controller.BaseController\nimport com.sfxcode.sapphire.extension.showcase.model.{ Friend, PersonDatabase }\nimport javafx.collections.ObservableList\nimport javafx.event.ActionEvent\n\nimport scala.reflect._\n\nclass FriendTableController extends DataTableController with BaseController with BeanConversions {\n\n  type R = Friend\n\n  def ct: ClassTag[Friend] = classTag[R]\n\n  def items: ObservableList[FXBean[Friend]] = PersonDatabase.friends\n\n  override def willGainVisibility(): Unit = {\n    super.willGainVisibility()\n  }\n\n  override def initTable(tableFilter: DataTableFilter[R]): Unit = {\n    super.initTable(tableFilter)\n    tableFilter.addSearchField(\"nameFilter\", \"name\").setPromptText(\"Name\")\n  }\n\n  def actionAddItem(event: ActionEvent): Unit = {\n    tableFilter.itemValues.add(items.head)\n  }\n\n  def actionAddItems(event: ActionEvent): Unit = {\n    tableFilter.itemValues.addAll(items)\n  }\n\n  def actionRemoveAllItems(event: ActionEvent): Unit = {\n    tableFilter.itemValues.clear()\n  }\n\n  def actionReplaceItems(event: ActionEvent): Unit = {\n    tableFilter.itemsProperty.set(items)\n  }\n}","title":"Example"},{"location":"/report/index.html","text":"","title":"Reports"},{"location":"/report/index.html#reports","text":"For Report Generation JasperReports can be used. It is based on the itext library.\nFor PDF reports the PdfExporter can be used. As DataSource implementation is a FXBeanDataSource available.\nAs visual report editor you can use Jaspersoft Studio (Community Edition).","title":"Reports"},{"location":"/report/index.html#datasource","text":"FXBeanDataSource wraps Beans in FXBeans for building a rewindable JasperReports DataSource.\nIn the Templates (.jrxml) items can be accessed like maps.","title":"DataSource"},{"location":"/report/index.html#pdfexporter","text":"PDFExporter simplifies the export to PDF task. You need only a JasperReports File (compiled or uncompiled).\nReport Parameter are optional by creation a Map of key/values. DataSource is optional (use a FXBeanDataSource if needed) optional exporter / report configuration","title":"PDFExporter"},{"location":"/report/index.html#example","text":"// create report\nval exporter = PdfExporter(Resource.getUrl(\"report/personTable.jrxml\"))\nval exportResult = exporter.exportReport(\n  File.newTemporaryFile(),\n  Map(\"text\" -> \"All Persons\"),\n  FXBeanDataSource.fromObservableList[Person](tableFilter.selectedItems)\n)\n// open report\nif (exportResult.completed) {\n  if (System.getProperty(\"os.name\").contains(\"Mac\"))\n    \"open %s\".format(exportResult.exportFile.pathAsString) !\n  else\n    \"xdg-open %s\".format(exportResult.exportFile.pathAsString) !\n}","title":"Example"},{"location":"/filter/index.html","text":"","title":"DataFilter"},{"location":"/filter/index.html#datafilter","text":"DataFilter connect JavaFX controls with collection based data used in tables and lists. Changes on the controls are reflected in data filtering.\nDataFilter provide functions for adding search controls.","title":"DataFilter"},{"location":"/filter/index.html#searchfield","text":"","title":"SearchField"},{"location":"/filter/index.html#searchbox","text":"","title":"SearchBox"},{"location":"/filter/index.html#example","text":"tableFilter.addSearchField(\"addressFilter\", \"address\").setPromptText(\"Address\")\ntableFilter.addSearchBox(\"genderFilter\", \"gender\", \"male/female\")\ntableFilter.addSearchBox(\"fruitFilter\", \"favoriteFruit\", \"all fruits\")","title":"Example"},{"location":"/filter/index.html#datalistfilter","text":"Implementation of DataFilter for DataListViews.","title":"DataListFilter"},{"location":"/filter/index.html#datatablefilter","text":"Implementation of DataFilter for TableViews.","title":"DataTableFilter"},{"location":"/filter/data_list_filter.html","text":"","title":"DataListFilter"},{"location":"/filter/data_list_filter.html#datalistfilter","text":"","title":"DataListFilter"},{"location":"/filter/data_table_filter.html","text":"","title":"DataTableFilter"},{"location":"/filter/data_table_filter.html#datatablefilter","text":"","title":"DataTableFilter"},{"location":"/controlsfx/index.html","text":"","title":"ControlsFX"},{"location":"/controlsfx/index.html#controlsfx","text":"ControlsFX is used in several parts of sapphire-extensions.\nGithub Source\nFeatures","title":"ControlsFX"},{"location":"/controlsfx/index.html#property-resolver-for-controlsfx-controls","text":"Only Rating is supported at this time.\nExtensionResolver should be added in the Application:\ndef applicationDidLaunch() {\n  logger.debug(\"start \" + this)\n  ExtensionResolver.add()\n  replaceSceneContent(showcaseController)\n}\nIncluding of custom controls in sapphire-core can be done like this:\nclass ExtensionResolver extends NodePropertyResolving {\n\n  def resolve(node: Node): Option[Property[_]] =\n    node match {\n      case rating: Rating => Some(rating.ratingProperty())\n      case _ => None\n    }\n}","title":"Property resolver for ControlsFX controls"},{"location":"/controlsfx/index.html#propertysheet","text":"PropertySheet is a vertical list of properties that can be edited with a number of pre-build editors. As well as supporting the built-in editors, you can provide custom editors for your specific use cases.","title":"PropertySheet"},{"location":"/controlsfx/property_sheet.html","text":"","title":"PropertySheet"},{"location":"/controlsfx/property_sheet.html#propertysheet","text":"PropertySheet is a vertical list of properties that can be edited with a number of pre-build editors. As well as supporting the built-in editors, you can provide custom editors for your specific use cases.","title":"PropertySheet"},{"location":"/controlsfx/property_sheet.html#beanitems","text":"BeanItems is the sapphire implementation of Items in ControlsFX PropertySheet.","title":"BeanItems"},{"location":"/controlsfx/property_sheet.html#usage","text":"Use FXBeanAdapter for Bean Bindings Init PropertySheet Init BeanItems\nlazy val adapter = FXBeanAdapter[Person](this)\nval propertySheet = new PropertySheet()\nval beanItems = BeanItems()\nInit BeanItems Bindings in the didGainVisibilityFirstTime LifeCycle of the ViewController\nbeanItems.addItem(\"name\", \"Name\", \"Basic\", \"Name\")\nbeanItems.addItem(\"age\", \"Age\", \"Basic\", \"Age\", editable = false)\nbeanItems.addItem(\"isActive\", \"Active\", \"Extended\", \"Active\")\nbeanItems.addItem(\"registered\", \"Registered\", \"Extended\", \"Registered\")\nUpdate BeanItems Data\ndef setRandomPerson(): Unit = {\n  val person: FXBean[Person] = PersonDatabase.testPerson(random.nextInt(100))\n  adapter.set(person)\n\n  beanItems.updateBean(person)\n  propertySheet.getItems.setAll(beanItems.getItems)\n}","title":"Usage"},{"location":"/ikonli.html","text":"","title":"Ikonli"},{"location":"/ikonli.html#ikonli","text":"More Infos about Ikonli can be found in the Ikonli Documentation","title":"Ikonli"},{"location":"/ikonli.html#actual-loaded-dependencies-in-sapphire-extensions","text":"ikonli-javafx ikonli-fontawesome-pack","title":"Actual loaded Dependencies in sapphire-extensions"},{"location":"/sample.html","text":"","title":"Showcase"},{"location":"/sample.html#showcase","text":"A sample Application can be found under demos/showcase.\nThis application is actual part of the documentation with displayed sources.","title":"Showcase"},{"location":"/changes.html","text":"","title":"Version History"},{"location":"/changes.html#version-history","text":"","title":"Version History"},{"location":"/changes.html#current-version","text":"","title":"Current Version"},{"location":"/changes.html#download","text":"","title":"Download"},{"location":"/changes.html#history","text":"# Changes #\n\n## Versions\n\n### 1.0.10\n* Export to PDF with JasperReports\n* FXBeanDataSource (Report Datasource)\n* JavaFX 14.0.2.1\n\n### 1.0.10\n* PDF Exporter added some functions\n\n### 1.0.9\n* sapphire-core 1.8.3\n* PDF Support (JasperReports)\n\n\n### 1.0.7\n* sapphire-core 1.8.0\n* showcase refactoring - now like sapphire-core showcase\n* FXCellFactory removed => use FXTableCellFactory from sapphire-core\n\n### 1.0.6\n* release because of problems with 1.0.5\n\n### 1.0.5\n* docs updated\n* BeanItem BugFix\n\n### 1.0.4\n* BeanItem class can be set\n* BeanItems from Map\n* BeanItem(s) tests added\n\n### 1.0.3\n* sapphire-core 1.7.3\n* BeanItem support editable\n\n### 1.0.2\n* sapphire-core 1.7.1\n\n### 1.0.1\n* sapphire-core 1.6.9\n* JavaFX 13.0.2\n\n### 1.0.0\n* DualDataListView by config\n* sapphire-core 1.6.7\n\n### 0.9.3\n* sapphire-core 1.6.6\n* Docs updated\n\n### 0.9.2\n* sapphire-core 1.6.2\n* added SceneExtensions\n\n### 0.9.1\n* sapphire-core 1.6.1\n* Scala 2.13\n* remove scalafx dependencies\n\n### 0.9.0\n* sapphire-core 1.5.0 ([javafx 12.0.1](https://github.com/javafxports/openjdk-jfx/blob/jfx-12/doc-files/release-notes-12.md#release-notes-for-javafx-12))\n* showcase demo (moved)\n* scenebuilder jar sources (only use for preview in scenebuilder)\n\n### 0.8.4\n* sapphire-core 1.4.5 ([javafx 11.0.2](https://github.com/johanvos/openjdk-jfx/blob/jfx-11/doc-files/release-notes-11.0.2.md))\n* ikonli 11.1.0\n* sbt 1.2.8\n\n### 0.8.3\n* sapphire-core 1.4.3\n\n### 0.8.2\n* sbt 1.2.7\n* sapphire-core 1.4.2\n* akka 2.5.19\n* SceneBuilder jar 0.2.1\n\n### 0.8.1\n* sbt 1.2.6\n* sapphire-core 1.4.1\n* Icon Tools\n\n### 0.8.0\n* sapphire-core 1.4.0\n* drop scala 2.11 support\n* OpenJFX 11\n* drop FontawesomeFX for Ikonli\n\n\n### 0.7.6\n\n* sapphire-core 1.3.4\n\n### 0.7.5\n\n* Debug Hot Reload added","title":"History"}]}